(define 
    (domain transporte_publico)
    (:requirements :durative-actions :typing :fluents)
    (:types usuario ciudad bicicleta - object)
    (:predicates 
        (at ?u - usuario ?c - ciudad)
        (in ?b - bicicleta ?c - ciudad ?u - usuario)
        (residente ?u - usuario)
        (tiene-suplemento ?u - usuario)
        (tiene-ticket ?u - usuario)
        (conexion-bus ?c1 - ciudad ?c2 - ciudad)
        (conexion-metro ?c1 - ciudad ?c2 - ciudad)
        (conexion-tren ?c1 - ciudad ?c2 - ciudad)
    )
    (:functions 
        (distancia ?c1 - ciudad ?c2 - ciudad)
		(velocidad-bus)
        (velocidad-metro)
        (velocidad-tren)
        (precio-bonometro)
        (precio-tren)
        (dinero-persona ?u - usuario)
        (coste-total)
        (bonometro ?u - usuario)
        (recarga-bono)
        (compra-ticket)
        (compra-suplemento)
        (precio-suplemento)
    )
    (:durative-action viajar-bus
        :parameters (?u - usuario ?c1 - ciudad ?c2 - ciudad)
        :duration   (= ?duration (/ (distancia ?c1 ?c2) (velocidad-bus)))
        :condition  (and    (at start (at ?u ?c1))
                            (at start (residente ?u))
                            (over all (residente ?u))
                            (at end (residente ?u))
                            (at start (conexion-bus ?c1 ?c2))
                            (over all (conexion-bus ?c1 ?c2))
                            (at end (conexion-bus ?c1 ?c2))
                    )
        :effect     (and    (at end (at ?u ?c2))
                            (at start (not (at ?u ?c1)))
                    )
    )  
    (:durative-action viajar-metro
        :parameters (?u - usuario ?c1 - ciudad ?c2 - ciudad)
        :duration   (= ?duration (/ (distancia ?c1 ?c2) (velocidad-metro)))
        :condition  (and    (at start (at ?u ?c1))
                            (at start (> (bonometro ?u) 0))
                            (at start (conexion-metro ?c1 ?c2))
                            (over all (conexion-metro ?c1 ?c2))
                            (at end (conexion-metro ?c1 ?c2))
                    )
        :effect     (and    (at end (at ?u ?c2))
                            (at start (not (at ?u ?c1)))
                            (at start (decrease (bonometro ?u) 1))
                    )
    )  
    (:durative-action viajar-tren
        :parameters (?u - usuario ?c1 - ciudad ?c2 - ciudad)
        :duration   (= ?duration (/ (distancia ?c1 ?c2) (velocidad-tren)))
        :condition  (and    (at start (at ?u ?c1))
                            (at start (tiene-ticket ?u))
                            (at start (conexion-tren ?c1 ?c2))
                            (over all (conexion-tren ?c1 ?c2))
                            (at end (conexion-tren ?c1 ?c2))
                    )
        :effect     (and    (at end (at ?u ?c2))
                            (at start (not (at ?u ?c1)))
                            (at start (not (tiene-ticket ?u)))
                    )
    )  
    (:durative-action viajar-tren-bici
        :parameters (?u - usuario ?c1 - ciudad ?c2 - ciudad ?b - bicicleta)
        :duration   (= ?duration (/ (distancia ?c1 ?c2) (velocidad-tren)))
        :condition  (and    (at start (in ?b ?c1 ?u))
                            (at start (tiene-ticket ?u))
                            (at start (tiene-suplemento ?u))
                            (at start (conexion-tren ?c1 ?c2))
                            (over all (conexion-tren ?c1 ?c2))
                            (at end (conexion-tren ?c1 ?c2))
                    )
        :effect     (and    (at end (in ?b ?c2 ?u))
                            (at start (not (in ?b ?c1 ?u)))
                            (at start (not (tiene-ticket ?u)))
                            (at start (not (tiene-suplemento ?u)))
                    )
    )  
    (:durative-action recargar-bono
        :parameters (?u - usuario)
        :duration   (= ?duration (recarga-bono))
        :condition  (and    (at start (>= (dinero-persona ?u) (precio-bonometro)))
                    )
        :effect     (and    (at start (decrease (dinero-persona ?u) (precio-bonometro)))
                            (at start (increase (coste-total) (precio-bonometro)))
                            (at end (increase (bonometro ?u) 10))
                    )
    )  
    (:durative-action comprar-ticket
        :parameters (?u - usuario)
        :duration   (= ?duration (compra-ticket))
        :condition  (and    (at start (>= (dinero-persona ?u) (precio-tren)))
                    )
        :effect     (and    (at start (decrease (dinero-persona ?u) (precio-tren)))
                            (at start (increase (coste-total) (precio-tren)))
                            (at end (tiene-ticket ?u))
                    )
    )  
    (:durative-action comprar-suplemento
        :parameters (?u - usuario)
        :duration   (= ?duration (compra-suplemento))
        :condition  (and    (at start (>= (dinero-persona ?u) (precio-suplemento)))
                            (at start (tiene-ticket ?u))
                    )
        :effect     (and    (at start (decrease (dinero-persona ?u) (precio-suplemento)))
                            (at start (increase (coste-total) (precio-suplemento)))
                            (at end (tiene-suplemento ?u))
                    )
    )  
)