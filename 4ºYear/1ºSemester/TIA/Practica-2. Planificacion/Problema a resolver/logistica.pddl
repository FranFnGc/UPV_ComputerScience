(define (domain logistica)
(:requirements :durative-actions :typing :fluents)
(:types truck packXL packS person city - object)
(:predicates (at ?x - (either person truck packXL packS) ?c - city)
             (in ?p - (either packXL packS person) ?t - truck)
			 (driver_pos_busy ?t - truck)
			 (person_driving ?p - person)
			 (exists_route ?c1 ?c2 - city)
			 (grua_busy ?c - city)
			 (truck_busy ?t - truck))
(:functions (distance ?c1 - city ?c2 - city)
			(coste ?c1 - city ?c2 - city)
			(cost_driver_in_out)
		    (duration_driver_in_out)
			(duration_paqueteXL)
			(cost_paqueteXL)
			(duration_paqueteS)
			(cost_paqueteS)
			(duration_bus)
			(cost_bus)
			(coste_total)
            )


(:durative-action driver-in
 :parameters (?p - person ?t - truck ?c - city)
 :duration (= ?duration (duration_driver_in_out))
 :condition (and (at start (at ?p ?c))
				 (at start (at ?t ?c))
                 (over all (at ?t ?c))
				 (over all (at ?p ?c))
				 (at start (not(driver_pos_busy ?t)))
				 (at start (not(person_driving ?p)))
				 (over all (not(driver_pos_busy ?t)))
				 (over all (not(person_driving ?p))))
 :effect (and (at end (in ?p ?t))
			  (at end (driver_pos_busy ?t))
			  (at end (person_driving ?p))
			  (at end (not(at ?p ?c)))
			  (at end (increase (total-cost) (cost_driver_in_out)))))

(:durative-action driver-out
 :parameters (?p - person ?t - truck ?c - city)
 :duration (= ?duration (duration_driver_in_out))
 :condition (and (at start (in ?p ?t))
				 (at start (at ?t ?c))
                 (over all (in ?p ?t))
				 (over all (at ?t ?c))
				 (at start (driver_pos_busy ?t))
				 (at start (person_driving ?p))
				 (over all (driver_pos_busy ?t))
				 (over all (person_driving ?p)))
 :effect (and (at end (not (in ?p ?t)))
			  (at end (at ?p ?c))
			  (at end (not (driver_pos_busy ?t)))
			  (at end (not (person_driving ?p)))
			  (at end (increase (total-cost) (cost_driver_in_out)))))

(:durative-action drive 
 :parameters (?t - truck ?p - person ?c1 ?c2 - city)
 :duration (= ?duration (distance ?c1 ?c2))
 :condition (and (at start (at ?t ?c1))
				 (at start (in ?p ?t))
			     (at start (driver_pos_busy ?t))
				 (at start (person_driving ?p))
				 (over all (driver_pos_busy ?t))
				 (over all (person_driving ?p))
				 (over all (in ?p ?t))
				 (over all (exists_route ?c1 ?c2)))
 :effect (and (at start (not (at ?t ?c1)))
              (at end (at ?t ?c2))
              (at end (increase (total-cost) (coste ?c1 ?c2))))) 

(:durative-action load_packXL
 :parameters(?p - packXL ?t - truck ?c - city)
 :duration (= ?duration (duration_paqueteXL))
 :condition (and (at start (at ?p ?c))
				 (at start (not (truck_busy ?t)))
				 (at start (at ?t ?c))
				 (at start (driver_pos_busy ?t))
				 (over all (driver_pos_busy ?t))
			     (at start (not (grua_busy ?c))))
:effect (and (at start (grua_busy ?c))
              (at end (in ?p ?t))
			  (at end (not (at ?p ?c)))
			  (at end (truck_busy ?t))
              (at end (not(grua_busy ?c)))
			  (at end (increase (total-cost) (cost_paqueteXL)))))                                  

(:durative-action load_packS
 :parameters(?p - packS ?t - truck ?c - city)
 :duration (= ?duration (duration_paqueteS))
 :condition (and (at start (at ?p ?c))
				 (at start (not (truck_busy ?t)))
				 (at start (at ?t ?c))
				 (at start (driver_pos_busy ?t))
				 (over all (driver_pos_busy ?t)))
:effect (and  (at end (in ?p ?t))
			  (at end (truck_busy ?t))
			  (at end (not (at ?p ?c)))
			  (at end (increase (total-cost) (cost_paqueteS)))))

(:durative-action unload_packXL
 :parameters(?p - packXL ?t - truck ?c - city)
 :duration (= ?duration (duration_paqueteXL))
 :condition (and (at start (in ?p ?t))
				 (at start (at ?t ?c))
				 (at start (truck_busy ?t))
			     (at start (not (grua_busy ?c)))
				 (at start (driver_pos_busy ?t))
				 (over all (driver_pos_busy ?t)))
:effect (and (at start (grua_busy ?c))
              (at end (at ?p ?c))
			  (at end (not (in ?p ?t)))
			  (at end (not (truck_busy ?t)))
              (at end (not(grua_busy ?c)))
			  (at end (increase (total-cost) (cost_paqueteXL)))))   

(:durative-action unload_packS
 :parameters(?p - packS ?t - truck ?c - city)
 :duration (= ?duration (duration_paqueteS))
 :condition (and (at start (in ?p ?t))
				 (at start (truck_busy ?t))
				 (at start (at ?t ?c))
				 (at start (driver_pos_busy ?t))
				 (over all (driver_pos_busy ?t)))
:effect (and  (at end (at ?p ?c))
			  (at end (not (truck_busy ?t)))
			  (at end (not (in ?p ?t)))
			  (at end (increase (total-cost) (cost_paqueteS)))))      

(:durative-action bus
 :parameters(?p - person ?c1 ?c2 - city)
 :duration (= ?duration (duration_bus))
 :condition (and (at start (at ?p ?c1))
				 (at start (not(person_driving ?p)))
     			 (at start (exists_route ?c1 ?c2))
				 (over all (exists_route ?c1 ?c2)))
 :effect (and  (at end (at ?p ?c2))
			   (at end (not (at ?p ?c1)))
			   (at end (increase (total-cost) (cost_bus)))))  

)      
