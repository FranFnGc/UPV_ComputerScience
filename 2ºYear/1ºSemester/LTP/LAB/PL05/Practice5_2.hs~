-- *****************************
-- module Practice5
-- *****************************

module Practice5_2 where

  type Person = String
  type Book = String
  type Database = [(Person,Book)]

  exampleBase :: Database
  exampleBase = [("Alicia","El nombre de la rosa"),
                 ("Juan","La hija del canibal"),("Pepe","Odesa"),
                 ("Alicia","La ciudad de las bestias")]

  obtain :: Database -> Person -> [Book]
  obtain dBase thisPerson
    = [book | (person,book) <- dBase, person == thisPerson]

  borrow :: Database -> Book -> Person -> Database
  borrow dBase thisBook thisPerson
    = dBase ++ [(thisPerson,thisBook)]

  return' :: Database -> (Person,Book) -> Database
  return' dBase (thisPerson,thisBook)
    = [(person,book) | (person,book) <- dBase, person /= thisPerson && 
      book /= thisBook]

  data TreeInt = Leaf Int | Branch TreeInt TreeInt
  data Tree a = Leaf a | Branch (Tree a) (Tree a) deriving Show
  data BinTreeInt = Void | Node Int BinTreeInt BinTreeInt

  symmetric :: Tree a -> Tree a 
  symmetric (Leaf x) = Leaf x
  symmetric (Branch a b) = Branch (symmetric b) (symmetric a)
