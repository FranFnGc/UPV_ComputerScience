(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 10.2' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    101879,       2155]
NotebookOptionsPosition[     97852,       2020]
NotebookOutlinePosition[     98406,       2043]
CellTagsIndexPosition[     98316,       2038]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell[TextData[{
 StyleBox["Lab08: Sequences",
  FontColor->RGBColor[0.501961, 0, 0]],
 StyleBox[". ",
  FontSlant->"Italic",
  FontColor->RGBColor[0.501961, 0, 0]]
}], "Title",
 CellChangeTimes->{{3.587467221078125*^9, 3.587467244375*^9}, 
   3.587467352859375*^9, {3.587467610203125*^9, 3.58746761525*^9}, 
   3.58747952840625*^9, {3.587719392110547*^9, 3.587719421485347*^9}, {
   3.5884959962091446`*^9, 3.5884960064894133`*^9}, {3.58981191278125*^9, 
   3.58981192225*^9}, {3.590819862798381*^9, 3.5908198715979652`*^9}, {
   3.6886527555779796`*^9, 3.688652756344782*^9}, {3.7174723773581696`*^9, 
   3.717472377828433*^9}},
 TextJustification->1,
 FontFamily->"Times New Roman",
 FontColor->RGBColor[0, 0.500008, 0]],

Cell[CellGroupData[{

Cell[TextData[StyleBox["1. Introduction",
 FontSize->18]], "Section 1",
 CellChangeTimes->{{3.5874672518125*^9, 3.58746725453125*^9}, {
  3.587467464984375*^9, 3.5874674695*^9}},
 TextAlignment->Left,
 TextJustification->1,
 FontSize->16],

Cell[TextData[{
 "\n\tIn this practice we are going to deal with several aspects of sequences \
of real numbers and their applications by using ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " utilities: graphical representation, limits calculation and solving \
difference equations.\nDue to their usefulness, we should emphasize the \
recurrent sequences which allow us to model problems defined by inductive \
processes.\n"
}], "Text",
 CellChangeTimes->{
  3.58746748465625*^9, {3.587467625671875*^9, 3.5874676331875*^9}, {
   3.587467664453125*^9, 3.587467756265625*^9}, {3.587467786375*^9, 
   3.587467839*^9}, 3.587467883171875*^9, {3.58746801228125*^9, 
   3.5874680545*^9}, {3.5874684875*^9, 3.587468539953125*^9}, {
   3.58747131575*^9, 3.5874713185*^9}, {3.587471511953125*^9, 
   3.58747158621875*^9}, {3.587478092984375*^9, 3.587478113484375*^9}, {
   3.587478181453125*^9, 3.5874782635*^9}, 3.587479519703125*^9, 
   3.587570566375*^9, {3.58757062634375*^9, 3.58757064803125*^9}, 
   3.5876418960500326`*^9, 3.587642006772326*^9, 3.5876420595083885`*^9, {
   3.5876423888314266`*^9, 3.5876424466770277`*^9}, {3.5876424817093983`*^9, 
   3.5876425863226004`*^9}, {3.587718262080717*^9, 3.5877182736247177`*^9}, 
   3.587719445868147*^9, {3.5877194770525465`*^9, 3.587719535755347*^9}, 
   3.587719576143747*^9, 3.5877295124626856`*^9, {3.587729560947486*^9, 
   3.587729566797486*^9}, {3.588342186109375*^9, 3.58834218703125*^9}, {
   3.5884960289219255`*^9, 3.58849603711182*^9}, {3.5884963043581104`*^9, 
   3.5884963106137104`*^9}, {3.58849639368371*^9, 3.5884963999861107`*^9}, {
   3.5884975046058464`*^9, 3.5884975077570667`*^9}, {3.589811955*^9, 
   3.5898119785625*^9}, {3.589812055109375*^9, 3.58981206809375*^9}, {
   3.589812266953125*^9, 3.589812278796875*^9}, {3.59065277984375*^9, 
   3.590652832453125*^9}, 3.59065291871875*^9, {3.5908199019284477`*^9, 
   3.5908199414641685`*^9}, 3.590831002150502*^9},
 TextJustification->1,
 FontFamily->"Times New Roman",
 FontSize->16]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["2. Main aspects. ",
  FontSize->18],
 "Graphical representation"
}], "Section 1",
 CellChangeTimes->{{3.5874672518125*^9, 3.58746725453125*^9}, {
   3.587467464984375*^9, 3.5874674695*^9}, {3.587628634112982*^9, 
   3.5876286613264046`*^9}, {3.587629846153367*^9, 3.5876298755339537`*^9}, {
   3.5876441651906376`*^9, 3.5876441821443048`*^9}, {3.5877196038181467`*^9, 
   3.5877196141141467`*^9}, {3.588496439610312*^9, 3.588496454383607*^9}, 
   3.589798241484375*^9, {3.589812318921875*^9, 3.589812331171875*^9}, {
   3.590652857828125*^9, 3.590652861203125*^9}, {3.59065347275*^9, 
   3.590653474484375*^9}, {3.590821468621045*^9, 3.5908214966851273`*^9}},
 TextAlignment->Left,
 TextJustification->1,
 FontSize->16],

Cell["     ", "Text",
 CellChangeTimes->{{3.587477326234375*^9, 3.587477415421875*^9}, {
   3.58747748521875*^9, 3.587477491703125*^9}, {3.587477830953125*^9, 
   3.587477854234375*^9}, {3.587478049484375*^9, 3.587478066734375*^9}, {
   3.5874783103125*^9, 3.5874783123125*^9}, {3.587478348546875*^9, 
   3.587478383640625*^9}, {3.5874795494375*^9, 3.587479557125*^9}, {
   3.587626233890625*^9, 3.587626262359375*^9}, {3.58762633265625*^9, 
   3.587626378328125*^9}, {3.587626473234375*^9, 3.5876265155625*^9}, {
   3.58762703353125*^9, 3.587627152359375*^9}, 3.587627194328125*^9, {
   3.587627279203125*^9, 3.5876273490625*^9}, {3.58762751603125*^9, 
   3.587627538375*^9}, {3.5876289255653133`*^9, 3.58762893357069*^9}, {
   3.5876290289772396`*^9, 3.5876291242584596`*^9}, {3.587629227061206*^9, 
   3.5876292905990763`*^9}, {3.5876294843179655`*^9, 3.587629533928138*^9}, 
   3.587641049410149*^9, 3.587642918690772*^9, 3.587718428485917*^9, {
   3.587719635330147*^9, 3.587719673316147*^9}, {3.5877198172263403`*^9, 
   3.587719825915652*^9}, {3.5877199126215634`*^9, 3.5877199589541574`*^9}, {
   3.5877295867966857`*^9, 3.5877296241586857`*^9}, {3.588496543335162*^9, 
   3.5884965743943644`*^9}, {3.5884976244453773`*^9, 3.588497714688177*^9}, {
   3.5885049147246923`*^9, 3.588504925067559*^9}, {3.58981234890625*^9, 
   3.589812409296875*^9}, {3.5906529275*^9, 3.59065293015625*^9}, 
   3.590653483453125*^9, {3.590653706140625*^9, 3.590653706703125*^9}, 
   3.5908204703133726`*^9, {3.590820510257549*^9, 3.5908205620492163`*^9}, {
   3.5908205981270514`*^9, 3.590820623203644*^9}, {3.5908207056968317`*^9, 
   3.590820709488798*^9}, {3.5908213075759077`*^9, 3.5908214428164253`*^9}, {
   3.5908215198718877`*^9, 3.590821542537859*^9}, 3.5908310159275975`*^9, 
   3.590834067953224*^9, {3.625904354947157*^9, 3.625904383614073*^9}},
 TextJustification->1,
 FontFamily->"Times New Roman",
 FontSize->16],

Cell[TextData[{
 "     Sometimes, obtaining some elements of a sequence {",
 Cell[BoxData[
  FormBox[
   SubscriptBox["a", "n"], TraditionalForm]]],
 "} is not enough to intuitively know the behavior of the sequence. A  plot \
of it can help us to discover the monotony, bounds, convergence...\n      As \
a sequence of real numbers is a function from \[DoubleStruckCapitalN]  to \
\[DoubleStruckCapitalR] , a good idea for working with sequences is to think \
that the only difference between a function and  a sequence is in the domain, \
the domain of a sequence is discrete (only natural numbers).  ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " doesn't use the set of naturals number  \[DoubleStruckCapitalN] , only use \
integers, but of you can select positive integers as natural number."
}], "Text",
 CellChangeTimes->{{3.587477326234375*^9, 3.587477415421875*^9}, {
   3.58747748521875*^9, 3.587477491703125*^9}, {3.587477830953125*^9, 
   3.587477854234375*^9}, {3.587478049484375*^9, 3.587478066734375*^9}, {
   3.5874783103125*^9, 3.5874783123125*^9}, {3.587478348546875*^9, 
   3.587478383640625*^9}, {3.5874795494375*^9, 3.587479557125*^9}, {
   3.587626233890625*^9, 3.587626262359375*^9}, {3.58762633265625*^9, 
   3.587626378328125*^9}, {3.587626473234375*^9, 3.5876265155625*^9}, {
   3.58762703353125*^9, 3.587627152359375*^9}, 3.587627194328125*^9, {
   3.587627279203125*^9, 3.5876273490625*^9}, {3.58762751603125*^9, 
   3.587627538375*^9}, {3.5876289255653133`*^9, 3.58762893357069*^9}, {
   3.5876290289772396`*^9, 3.5876291242584596`*^9}, {3.587629227061206*^9, 
   3.5876292905990763`*^9}, {3.5876294843179655`*^9, 3.587629533928138*^9}, 
   3.587641049410149*^9, 3.587642918690772*^9, 3.587718428485917*^9, {
   3.587719635330147*^9, 3.587719673316147*^9}, {3.5877198172263403`*^9, 
   3.587719825915652*^9}, {3.5877199126215634`*^9, 3.5877199589541574`*^9}, {
   3.5877295867966857`*^9, 3.5877296241586857`*^9}, {3.588496543335162*^9, 
   3.5884965743943644`*^9}, {3.5884976244453773`*^9, 3.588497714688177*^9}, {
   3.5885049147246923`*^9, 3.588504925067559*^9}, {3.58981234890625*^9, 
   3.589812409296875*^9}, {3.5906529275*^9, 3.59065293015625*^9}, 
   3.590653483453125*^9, {3.590653706140625*^9, 3.590653706703125*^9}, 
   3.5908204703133726`*^9, {3.590820510257549*^9, 3.5908205620492163`*^9}, {
   3.5908205981270514`*^9, 3.590820623203644*^9}, 3.5908206890153008`*^9, {
   3.59083103508759*^9, 3.590831155867317*^9}, {3.5908321883126516`*^9, 
   3.5908322320372095`*^9}, {3.5908322638127794`*^9, 3.590832265325902*^9}, {
   3.5908323071161585`*^9, 3.590832495724599*^9}, {3.590832532745772*^9, 
   3.590832541872357*^9}, {3.590832709054043*^9, 3.590832786281963*^9}, {
   3.5908332279213467`*^9, 3.5908333023424096`*^9}, {3.5908340918054843`*^9, 
   3.5908341012758985`*^9}, {3.625904122968338*^9, 3.6259041267290707`*^9}, 
   3.6259042186092606`*^9, {3.625904277502512*^9, 3.625904392711322*^9}, {
   3.657337914258562*^9, 3.657337916084237*^9}, {3.6787744763457727`*^9, 
   3.6787745338242736`*^9}},
 TextJustification->1,
 FontFamily->"Times New Roman",
 FontSize->16],

Cell[CellGroupData[{

Cell["Table", "Subsubsection",
 CellChangeTimes->{{3.58747850765625*^9, 3.587478548078125*^9}, {
   3.58747922809375*^9, 3.587479249828125*^9}, {3.587634047152693*^9, 
   3.5876340554030094`*^9}, {3.587643803194679*^9, 3.5876438089604883`*^9}, 
   3.588430225054895*^9, 3.59083410768832*^9, 3.590839177148*^9, {
   3.657338842534399*^9, 3.6573388543906975`*^9}},
 TextJustification->1,
 FontFamily->"Times New Roman",
 FontSize->16],

Cell[TextData[{
 "Let's study the behavior of the sequence  ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["a", "n"], TraditionalForm]]],
 "=",
 Cell[BoxData[
  FormBox[
   FractionBox[
    RowBox[{"n", " ", "+", "1"}], 
    RowBox[{
     SuperscriptBox["n", "2"], "+", "1"}]], TraditionalForm]]],
 StyleBox[" . ",
  FontSlant->"Italic"],
 "First we need to write it like a function"
}], "Text",
 CellChangeTimes->{{3.5898125465*^9, 3.58981255534375*^9}, {
  3.590833333475011*^9, 3.590833436728385*^9}, {3.657337919964547*^9, 
  3.657337921149174*^9}},
 FontSize->16],

Cell[BoxData[
 RowBox[{
  RowBox[{"a", "[", "n_", "]"}], ":=", 
  FractionBox[
   RowBox[{"n", " ", "+", "1"}], 
   RowBox[{
    SuperscriptBox["n", "2"], "+", "1"}]]}]], "Input",
 CellChangeTimes->{{3.58981256378125*^9, 3.589812567421875*^9}, {
  3.5908334398331633`*^9, 3.59083345532585*^9}},
 CellID->698557789],

Cell[TextData[{
 "Now we want to calculate several terms of the sequence, for example the \
20th first terms. We can use the ",
 StyleBox["Table[ ]",
  FontWeight->"Bold"],
 " command to calculate a list with the 20th terms of the sequence. You can \
see how ",
 StyleBox["Table[ ]",
  FontWeight->"Bold"],
 " command works:"
}], "Text",
 CellChangeTimes->{{3.588429962761627*^9, 3.5884299843721085`*^9}, {
   3.58981260328125*^9, 3.5898126083125*^9}, {3.589812654328125*^9, 
   3.589812656671875*^9}, {3.5908334858275642`*^9, 3.590833609363638*^9}, 
   3.6548366685036407`*^9, {3.6573379309892454`*^9, 3.6573379339032803`*^9}},
 FontSize->16],

Cell[GraphicsData["CompressedBitmap", "\<\
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
/Q==\
\>"], "Graphics",
 ImageSize->{718, 313},
 Background->GrayLevel[1]],

Cell[TextData[{
 "We are going to calculate a list with the 20th first terms of ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["a", "n"], TraditionalForm]]],
 Cell[BoxData[
  FormBox[
   RowBox[{"=", 
    FractionBox[
     RowBox[{"n", " ", "+", "1"}], 
     RowBox[{
      SuperscriptBox["n", "2"], "+", "1"}]]}], TraditionalForm]]],
 " so:"
}], "Text",
 CellChangeTimes->{{3.59065317665625*^9, 3.59065318396875*^9}, {
  3.5908336732850323`*^9, 3.590833749922056*^9}, {3.6259044236856585`*^9, 
  3.62590442521487*^9}},
 FontSize->16],

Cell[BoxData[
 RowBox[{"List1", "=", 
  RowBox[{"Table", "[", 
   RowBox[{
    FractionBox[
     RowBox[{"n", "+", "1"}], 
     RowBox[{
      SuperscriptBox["n", "2"], "+", "1"}]], ",", 
    RowBox[{"{", 
     RowBox[{"n", ",", "1", ",", "20"}], "}"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.5908337616391582`*^9, 3.590833763464592*^9}},
 CellID->88999241]
}, Closed]],

Cell[CellGroupData[{

Cell["ListPlot", "Subsubsection",
 CellChangeTimes->{{3.58747850765625*^9, 3.587478548078125*^9}, {
   3.58747922809375*^9, 3.587479249828125*^9}, {3.587634047152693*^9, 
   3.5876340554030094`*^9}, {3.587643803194679*^9, 3.5876438089604883`*^9}, 
   3.588430225054895*^9, 3.59083410768832*^9, 3.590839177148*^9, {
   3.657338842534399*^9, 3.657338881658995*^9}},
 TextJustification->1,
 FontFamily->"Times New Roman",
 FontSize->16],

Cell[TextData[{
 "Now we can use the ",
 StyleBox["ListPlot[ ] ",
  FontWeight->"Bold"],
 "to plot the sequence. Remember how ",
 StyleBox["ListPlot[ ]",
  FontWeight->"Bold"],
 "  command works:"
}], "Text",
 CellChangeTimes->{{3.5908337975705643`*^9, 3.590833872460164*^9}, 
   3.654836671901774*^9},
 FontSize->16],

Cell[GraphicsData["CompressedBitmap", "\<\
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
87R/B/oWaYr9/MEJ07AoPBtkkmVqzgrVwOmAcowKqDmqfIghMB4cgiekgJwE
lA2ILzc4OSbG5BMrvKZBTniVfhUf8k2Xgrs9+H92+/h76m/yqaiDt+DE2IE2
yCpsIoZvN9OgrXGeX8/nHtAekXJy8if45JMPUTu8CoYe04aPFWhTOQKT6dKl
dOv/JGp/OocuN20aPtSHHaahObkIXabP/87NQceOvEwFme9nzJsyF0cc8jWQ
flP6tDKlbIqUdy8SYlNEfdzkKFb85wV8OGUKppAtNkNfvEWpa2gjC7bR+1oB
8z3pDrmYTZHSmifpqlJbenTEonM+tUpPDuKi2rJln4PY3oMtf6rrlJa2PluP
b9t8w95PNV7y91++U6YuR882n2GjKfU1iVyV1XKWkhnvcM8YIjOqb6KQgP1z
Kdq0acO26JO6L5SShjYy1XRfd019yh1UMZmxbEB3L5YEs2tK9tyqfr2qjSxC
1trU/7Pjh13SjA+jBIAobmOkoY2siY2slovBcVrlbn/Bl4+kdePTSuKjXVSU
Xdgm1RiVxEdl2C5c09gsoEy2/skpr6hMEvbNno3ZPx6H8RUmGtXHFhMZlc/e
hMw8g0xuWH2BwlTWmPRkbjOK8m3RMX2Cqz7mVEZhMUBqs2GPrNi5gDpx0/vn
zMEcsm0/71PXU+m4fFCKwb6RcdfjaPVBH8zZd8ao3LpPW6LunQ8iotUYJBmV
S1iFOduTzJ/XUEWNyiWNa4VWb1QC7m+CVq1aoctarXJChawclZ3fzNDMOXhG
XpdI2Zw9dCUTVsmzWiXVMotZ0nEeuU+VDlUyufI0s8EfpTeX4KlcFmxiWyxX
zMXaJwvyslTuVE0sFIdZxWBfE33+Nbz33nsYl6QWcCSu2vzpE4aYnB/ADyN/
hP9gL7Tsu4wwYHz+jDbbc5j/UmfE+a8oVlc0QrnnBiDh+nntMxmBOuT6MfQB
qtNj8N4307DytB+mbx9ouuQXJkxfoPNZzo2mky6npUmjSVWa4dlPF1PneUzi
9/DW891x1MWnWXt2Y9687WTbQVDNm7eFdJ7z5u3C0kOnQRcjX0Uk89i2S/zf
jT1ZvJ1uITJepjgrvyMzQ0OdgcztO0SZ7ViUZHiY6twhbJK0VQmCjfB87KXj
+rG9BDGVhmH+sRQ3W5IG+gPytE3cCcZal14WGkM6TTTEoINHEDvz4M9p3TBs
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\
\>"], "Graphics",
 ImageSize->{652, 244},
 ImageMargins->0,
 Background->GrayLevel[1]],

Cell[BoxData[
 RowBox[{"ListPlot", "[", "List1", "]"}]], "Input",
 CellChangeTimes->{{3.590832598051558*^9, 3.590832620282983*^9}, 
   3.59083265783459*^9}],

Cell["\<\
 Although the graph, by itself, can not prove anything, it can give us an \
intuitive idea: this is a decreasing sequence with 0 as lower bound.\
\>", "Text",
 CellChangeTimes->{{3.590833954401868*^9, 3.590833958442786*^9}, {
   3.625904438525253*^9, 3.6259044431909084`*^9}, {3.678775187576428*^9, 
   3.678775231310305*^9}, 3.683957111300852*^9},
 FontSize->16]
}, Closed]],

Cell[CellGroupData[{

Cell["DiscretePlot", "Subsubsection",
 CellChangeTimes->{{3.58747850765625*^9, 3.587478548078125*^9}, {
   3.58747922809375*^9, 3.587479249828125*^9}, {3.587634047152693*^9, 
   3.5876340554030094`*^9}, {3.587643803194679*^9, 3.5876438089604883`*^9}, 
   3.588430225054895*^9, 3.59083410768832*^9, 3.590839177148*^9, {
   3.657338842534399*^9, 3.6573388543906975`*^9}, {3.6573388929980392`*^9, 
   3.657338902891654*^9}},
 TextJustification->1,
 FontFamily->"Times New Roman",
 FontSize->16],

Cell[TextData[{
 " We can use ",
 StyleBox["DiscretePlot[ ] ",
  FontWeight->"Bold"],
 "to plot the sequence as well."
}], "Text",
 CellChangeTimes->{{3.5908337975705643`*^9, 3.590833872460164*^9}, 
   3.654836671901774*^9, {3.6573390987571907`*^9, 3.6573391413317738`*^9}},
 FontSize->16],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1: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
OJd1tOcw/YseZhHJU9pvYuaUTvRq/mzPZR2pI9qXE0o3Wf7fInnLmummMq++
u7nOXyoTj+Hvov9WMOzbPZquu93+GRRl4nzGPAn8aqo3+SLOz+K3nbH5/O/R
+2eiZP89v1tTl23bSuqNg9WkQVrSRGoKIllnYNct8UsOYUH97agRdSmUKDy2
2iGsZPkZGyhH4TAhSR1vV3/3SwzPxvqzuuJIm5L1yo12KWm543ANanKWPv59
JYe55edwJuvYhxlR4rfc3yV1SifusIyd0slezZztmawjdUS7m+IeVj3V0GZE
+6zuf96Bal4itTZ19H/J5O2VJU0frrdt5taklNv+O4OsA35ZzfXp6XtyBKNZ
AU7+i1UN7vW0UntLq5nZaIb+Jgl59KbrhoKZnDrtOfmJAk4m/EjmSxopDHyn
Y3nhidSjfP1RmnK6r15HUX0It7v1dvTri2TT9eTJ+TY7b99hRlaVAMA9NB8w
MbIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwLP2x+GvAABP
4ORpDwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAvbp9t8shu
T98TAFb49uX1b+9fdT5+igt8evv+9e9/O30/x727DPvf9faP3z/0tjzQSUa6
w/XZZnN2czj9ef7J7LLNdp/env+SdtHGw9VFvvH86nD6bgP88j5/fPX2a/fz
IPF4eu8uV/Xh65ugz+8uP7z71r2a5x7Ls47pdvfXJxi2TtLoM3C77acWgcPt
bnjSkhsBeGph1hEM0xNzBd30wuWH15df2u2f3rbbv7Sjf1U4r6SpsBnZw2mW
tpL+3Mv7N5+/J14KGu1lHXkr3S4jWUcwPZLqTK/dxiABuLs535TTH7tyGqSY
kSimJopr6uqlsyw7a6ZHymvw/PI8Hy7XXHTHjZaVFLu3P8zWcI9d1nqCJhr5
2WtOeHY72q6sA+DnFWcdY0lIckuRZjQJQPFzs2OZYARzDsUUSlPy88dqQA8n
JYryQSKRnHMYL79uriNPObotecfm2m3FCUCRV9TpRDne5fnGRbbNru/qAuWs
/kX+z+qq/HB3yLfkBc7zYqMX6TON5pXcbi+udzfn231Rf/IWQ2zFLnc32b0S
hnv06l6ajK7KPfK2RtuVdQD8vFZmHeUoP1wH8vVNNP/Qb6JfyWBu4VWUOQxG
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
    "], {{0, 401}, {722, 0}}, {0, 255},
    ColorFunction->RGBColor],
   BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
   Selectable->False],
  BaseStyle->"ImageGraphics",
  ImageSize->Automatic,
  ImageSizeRaw->{722, 401},
  PlotRange->{{0, 722}, {0, 401}}]], "Input"],

Cell[CellGroupData[{

Cell[" Plot a sequence:", "Text",
 CellChangeTimes->{{3.5908337975705643`*^9, 3.590833872460164*^9}, 
   3.654836671901774*^9, {3.6573390987571907`*^9, 3.6573391413317738`*^9}, {
   3.6573391792995214`*^9, 3.657339185461838*^9}},
 FontSize->16],

Cell[BoxData[
 RowBox[{"DiscretePlot", "[", 
  RowBox[{
   RowBox[{"PrimePi", "[", "k", "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"k", ",", "1", ",", "50"}], "}"}]}], "]"}]], "Input",
 CellID->653825295]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 " Here is another example of the fiction ",
 StyleBox[" DiscretePlot[] ",
  FontWeight->"Bold"],
 ": Show a Riemann sum approximation to the area under a curve:"
}], "Text",
 CellChangeTimes->{{3.5908337975705643`*^9, 3.590833872460164*^9}, 
   3.654836671901774*^9, {3.6573390987571907`*^9, 3.6573391413317738`*^9}, {
   3.6573391792995214`*^9, 3.657339185461838*^9}, {3.6573393507046814`*^9, 
   3.6573393556375666`*^9}, 3.678775514158204*^9, {3.678775621638794*^9, 
   3.6787756619416647`*^9}, 3.6839571154349046`*^9},
 FontSize->16],

Cell[BoxData[
 RowBox[{"Show", "[", 
  RowBox[{
   RowBox[{"DiscretePlot", "[", 
    RowBox[{
     RowBox[{"Sin", "[", "t", "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"t", ",", "0", ",", 
       RowBox[{"2", "Pi"}], ",", 
       RowBox[{"Pi", "/", "6"}]}], "}"}], ",", 
     RowBox[{"ExtentSize", "\[Rule]", "Full"}]}], "]"}], ",", 
   RowBox[{"Plot", "[", 
    RowBox[{
     RowBox[{"Sin", "[", "t", "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"t", ",", "0", ",", 
       RowBox[{"2", "Pi"}]}], "}"}]}], "]"}]}], "]"}]], "Input",
 CellID->20106212]
}, Closed]],

Cell[BoxData[
 RowBox[{"                     ", 
  RowBox[{"You", " ", "can", " ", "learn", " ", "more", " ", "about", " ", 
   ButtonBox[Cell["DiscretePlot"],
    BaseStyle->Dynamic[
      If[
       CurrentValue["MouseOver"], {
       "Link", FontColor -> RGBColor[0.854902, 0.396078, 0.145098]}, {
       "Link"}]],
    ButtonData->"paclet:ref/DiscretePlot"], "  ", "and", "  ", 
   ButtonBox[Cell["ExtentSize"],
    BaseStyle->Dynamic[
      If[
       CurrentValue["MouseOver"], {
       "Link", FontColor -> RGBColor[0.854902, 0.396078, 0.145098]}, {
       "Link"}]],
    ButtonData->"paclet:ref/ExtentSize"], " ", "clicking", " ", "on", " ", 
   "the", " ", "links"}]}]],
 CellChangeTimes->{{3.6573394627745495`*^9, 3.657339532401366*^9}, {
  3.6573395993292274`*^9, 3.657339600826914*^9}}]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[StyleBox["3. Criteria for limit calculations",
 FontSize->18]], "Section 1",
 CellChangeTimes->{{3.5874672518125*^9, 3.58746725453125*^9}, {
   3.587467464984375*^9, 3.5874674695*^9}, {3.587628634112982*^9, 
   3.5876286613264046`*^9}, {3.587629846153367*^9, 3.5876298755339537`*^9}, {
   3.5876312457540183`*^9, 3.5876312593327513`*^9}, {3.587732439821395*^9, 
   3.5877324485885954`*^9}, {3.587733579064195*^9, 3.587733610591795*^9}, {
   3.5877336788261952`*^9, 3.587733679855795*^9}, {3.5884964730413265`*^9, 
   3.5884964913402433`*^9}, {3.589552178859375*^9, 3.58955219521875*^9}, {
   3.590652028078125*^9, 3.5906520395*^9}, 3.590763716765625*^9, {
   3.590834039245544*^9, 3.590834051477512*^9}},
 TextAlignment->Left,
 TextJustification->1,
 FontSize->16],

Cell[TextData[{
 "As a general rule, we can use Limit[a[n], n->\[Infinity]] to determine the \
limit of a convergent sequence defined in a explicit way whenever we are \
almost convinced that ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " will give us the right answer. ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 StyleBox[" ",
  FontFamily->"CMSS12"],
 "correctly applies the procedure for limits computation in many cases. So, \
if we apply"
}], "Text",
 CellChangeTimes->{{3.5908341526844883`*^9, 3.5908342070730605`*^9}, {
   3.590834239556424*^9, 3.5908342570150623`*^9}, {3.590834300248204*^9, 
   3.5908344380606704`*^9}, {3.590836316461488*^9, 3.5908363186298184`*^9}, 
   3.5932423511810064`*^9, 3.625904508996426*^9},
 FontSize->16],

Cell[BoxData[
 RowBox[{"Limit", "[", 
  RowBox[{
   FractionBox[
    RowBox[{
     RowBox[{"6", 
      SuperscriptBox["n", "2"]}], " ", "+", "1"}], 
    RowBox[{"3", "-", 
     RowBox[{"2", 
      SuperscriptBox["n", "2"]}]}]], ",", 
   RowBox[{"n", "\[Rule]", " ", "Infinity"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.590835329804188*^9, 3.590835368793586*^9}, {
  3.5908359943288345`*^9, 3.590836041848628*^9}},
 CellID->30910],

Cell[BoxData[
 RowBox[{"Limit", "[", 
  RowBox[{
   SuperscriptBox[
    RowBox[{"(", 
     FractionBox[
      RowBox[{
       RowBox[{"2", "n"}], " ", "+", "1"}], 
      RowBox[{
       RowBox[{"3", "n"}], " ", "-", 
       SqrtBox["n"]}]], ")"}], 
    RowBox[{"n", "+", "2"}]], ",", 
   RowBox[{"n", "\[Rule]", " ", "Infinity"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.590836085719051*^9, 3.59083617693956*^9}},
 CellID->4460],

Cell[BoxData[
 RowBox[{"Limit", "[", 
  RowBox[{
   RowBox[{
    SqrtBox[
     RowBox[{"n", "+", "1"}]], 
    RowBox[{"(", 
     RowBox[{
      SqrtBox[
       RowBox[{"n", "+", "1"}]], "-", 
      SqrtBox[
       RowBox[{"n", "-", "1"}]]}], ")"}]}], ",", 
   RowBox[{"n", "\[Rule]", " ", "Infinity"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.590836085719051*^9, 3.59083617693956*^9}, {
  3.5908362320057945`*^9, 3.5908362952929664`*^9}},
 CellID->320308157],

Cell[TextData[{
 StyleBox["we will get the correct value for the limits,. -3, 0 and 1,  \
respectively,as you can check. The program also identifies undetermined \
limits of ",
  FontFamily->"Times New Roman"],
 Cell[BoxData[
  FormBox[
   SuperscriptBox["1", "\[Infinity]"], TraditionalForm]],
  FontFamily->"Times New Roman"],
 StyleBox[" kind and applies the Euler\[CloseCurlyQuote]s formula to solve \
them. For example, to compute the limit of the sequence:",
  FontFamily->"Times New Roman"]
}], "Text",
 CellChangeTimes->{{3.59083633636645*^9, 3.5908364117900324`*^9}, {
   3.590836661023599*^9, 3.590836666405875*^9}, {3.590836738668781*^9, 
   3.5908367436610365`*^9}, 3.593242389588945*^9, {3.6573379967130218`*^9, 
   3.657338026453622*^9}, 3.688652565419159*^9},
 FontSize->16,
 CellID->6972],

Cell[BoxData[
 RowBox[{"Limit", "[", 
  RowBox[{
   SuperscriptBox[
    RowBox[{"(", 
     FractionBox[
      RowBox[{"n", " ", "+", "1"}], 
      RowBox[{"n", " "}]], ")"}], 
    FractionBox[
     SqrtBox["n"], 
     RowBox[{
      SqrtBox[
       RowBox[{"n", "+", "1"}]], "-", 
      SqrtBox["n"]}]]], ",", 
   RowBox[{"n", "\[Rule]", " ", "Infinity"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.590836085719051*^9, 3.59083617693956*^9}, {
  3.590836502862689*^9, 3.5908365226289024`*^9}, {3.5908366145956182`*^9, 
  3.590836646982879*^9}},
 CellID->127861037]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[StyleBox["4. Recurrent sequences",
 FontSize->18]], "Section 1",
 CellChangeTimes->{{3.5874672518125*^9, 3.58746725453125*^9}, {
   3.587467464984375*^9, 3.5874674695*^9}, {3.587628634112982*^9, 
   3.5876286613264046`*^9}, {3.587629846153367*^9, 3.5876298755339537`*^9}, {
   3.5876441651906376`*^9, 3.5876441821443048`*^9}, {3.5877196038181467`*^9, 
   3.5877196141141467`*^9}, {3.588496439610312*^9, 3.588496454383607*^9}, 
   3.589798241484375*^9, {3.589812318921875*^9, 3.589812331171875*^9}, {
   3.590652857828125*^9, 3.590652861203125*^9}, {3.59065347275*^9, 
   3.590653474484375*^9}, {3.59065415771875*^9, 3.590654174234375*^9}, {
   3.5908367698859916`*^9, 3.590836779746013*^9}},
 TextAlignment->Left,
 TextJustification->1,
 FontSize->16],

Cell[TextData[{
 "     The Wofram Language has a wide coverage of named functions defined by \
sums and recurrence relations. You can find information in ",
 Cell[BoxData[
  ButtonBox[Cell["Recurrence and Sum Functions"],
   BaseStyle->Dynamic[
     If[
      CurrentValue["MouseOver"], {
      "Link", FontColor -> RGBColor[1, 0.25, 0.15]}, {"Link", 
       RGBColor[0.73333, 0, 0]}]],
   ButtonData->"paclet:guide/RecurrenceAndSumFunctions"]]],
 ". We will focus on ",
 Cell[BoxData[
  ButtonBox["RSolve",
   BaseStyle->"Link",
   ButtonData->"paclet:ref/RSolve"]]],
 " and ",
 Cell[BoxData[
  ButtonBox[Cell["RecurrenceTable"],
   BaseStyle->Dynamic[
     If[
      CurrentValue["MouseOver"], {
      "Link", FontColor -> RGBColor[0.854902, 0.396078, 0.145098]}, {"Link"}]],
   ButtonData->"paclet:ref/RecurrenceTable"]]],
 " functions.\n"
}], "Text",
 CellChangeTimes->{{3.587477326234375*^9, 3.587477415421875*^9}, {
   3.58747748521875*^9, 3.587477491703125*^9}, {3.587477830953125*^9, 
   3.587477854234375*^9}, {3.587478049484375*^9, 3.587478066734375*^9}, {
   3.5874783103125*^9, 3.5874783123125*^9}, {3.587478348546875*^9, 
   3.587478383640625*^9}, {3.5874795494375*^9, 3.587479557125*^9}, {
   3.587626233890625*^9, 3.587626262359375*^9}, {3.58762633265625*^9, 
   3.587626378328125*^9}, {3.587626473234375*^9, 3.5876265155625*^9}, {
   3.58762703353125*^9, 3.587627152359375*^9}, 3.587627194328125*^9, {
   3.587627279203125*^9, 3.5876273490625*^9}, {3.58762751603125*^9, 
   3.587627538375*^9}, {3.5876289255653133`*^9, 3.58762893357069*^9}, {
   3.5876290289772396`*^9, 3.5876291242584596`*^9}, {3.587629227061206*^9, 
   3.5876292905990763`*^9}, {3.5876294843179655`*^9, 3.587629533928138*^9}, 
   3.587641049410149*^9, 3.587642918690772*^9, 3.587718428485917*^9, {
   3.587719635330147*^9, 3.587719673316147*^9}, {3.5877198172263403`*^9, 
   3.587719825915652*^9}, {3.5877199126215634`*^9, 3.5877199589541574`*^9}, {
   3.5877295867966857`*^9, 3.5877296241586857`*^9}, {3.588496543335162*^9, 
   3.5884965743943644`*^9}, {3.5884976244453773`*^9, 3.588497714688177*^9}, {
   3.5885049147246923`*^9, 3.588504925067559*^9}, {3.58981234890625*^9, 
   3.589812409296875*^9}, {3.5906529275*^9, 3.59065293015625*^9}, 
   3.590653483453125*^9, {3.590653706140625*^9, 3.590653706703125*^9}, {
   3.590654191640625*^9, 3.590654200078125*^9}, {3.590655528328125*^9, 
   3.59065554496875*^9}, 3.590836961220335*^9, {3.5908374490471563`*^9, 
   3.5908374738380985`*^9}, {3.716708971997825*^9, 3.7167089861762447`*^9}, {
   3.716709062879972*^9, 3.7167091496454573`*^9}, {3.7167091967575183`*^9, 
   3.7167092520929747`*^9}},
 TextJustification->1,
 FontFamily->"Times New Roman",
 FontSize->16],

Cell[CellGroupData[{

Cell["RSolve[]", "Subsubsection",
 CellChangeTimes->{{3.58747850765625*^9, 3.587478548078125*^9}, {
   3.58747922809375*^9, 3.587479249828125*^9}, {3.587634047152693*^9, 
   3.5876340554030094`*^9}, {3.587643803194679*^9, 3.5876438089604883`*^9}, 
   3.588430225054895*^9, 3.59083410768832*^9, 3.590839177148*^9, {
   3.657338842534399*^9, 3.6573388543906975`*^9}, {3.678774787278721*^9, 
   3.678774789868325*^9}, {3.6888248060262604`*^9, 3.6888248104255123`*^9}, {
   3.6888279298433046`*^9, 3.6888279300593166`*^9}},
 TextJustification->1,
 FontFamily->"Times New Roman",
 FontSize->16],

Cell[TextData[{
 "     If you represent the ",
 Cell[BoxData[
  FormBox["n", TraditionalForm]], "InlineMath"],
 Cell[BoxData[
  FormBox[
   SuperscriptBox["\[Null]", "th"], TraditionalForm]]],
 " term in a sequence as ",
 Cell[BoxData[
  FormBox[
   RowBox[{"a", "[", "n", "]"}], TraditionalForm]], "InlineMath"],
 ", you can use a  ",
 StyleBox["recurrence equation",
  FontSlant->"Italic"],
 " to specify how it is related to other terms in the sequence.\n",
 Cell[BoxData[
  ButtonBox["RSolve",
   BaseStyle->"Link",
   ButtonData->"paclet:ref/RSolve"]], "InlineFormula"],
 " takes recurrence equations and solves them to get explicit formulas for ",
 Cell[BoxData[
  FormBox[
   RowBox[{"a", "[", "n", "]"}], TraditionalForm]], "InlineMath"],
 ". "
}], "Text",
 CellChangeTimes->{{3.587477326234375*^9, 3.587477415421875*^9}, {
   3.58747748521875*^9, 3.587477491703125*^9}, {3.587477830953125*^9, 
   3.587477854234375*^9}, {3.587478049484375*^9, 3.587478066734375*^9}, {
   3.5874783103125*^9, 3.5874783123125*^9}, {3.587478348546875*^9, 
   3.587478383640625*^9}, {3.5874795494375*^9, 3.587479557125*^9}, {
   3.587626233890625*^9, 3.587626262359375*^9}, {3.58762633265625*^9, 
   3.587626378328125*^9}, {3.587626473234375*^9, 3.5876265155625*^9}, {
   3.58762703353125*^9, 3.587627152359375*^9}, 3.587627194328125*^9, {
   3.587627279203125*^9, 3.5876273490625*^9}, {3.58762751603125*^9, 
   3.587627538375*^9}, {3.5876289255653133`*^9, 3.58762893357069*^9}, {
   3.5876290289772396`*^9, 3.5876291242584596`*^9}, {3.587629227061206*^9, 
   3.5876292905990763`*^9}, {3.5876294843179655`*^9, 3.587629533928138*^9}, 
   3.587641049410149*^9, 3.587642918690772*^9, 3.587718428485917*^9, {
   3.587719635330147*^9, 3.587719673316147*^9}, {3.5877198172263403`*^9, 
   3.587719825915652*^9}, {3.5877199126215634`*^9, 3.5877199589541574`*^9}, {
   3.5877295867966857`*^9, 3.5877296241586857`*^9}, {3.588496543335162*^9, 
   3.5884965743943644`*^9}, {3.5884976244453773`*^9, 3.588497714688177*^9}, {
   3.5885049147246923`*^9, 3.588504925067559*^9}, {3.58981234890625*^9, 
   3.589812409296875*^9}, {3.5906529275*^9, 3.59065293015625*^9}, 
   3.590653483453125*^9, {3.590653706140625*^9, 3.590653706703125*^9}, {
   3.590654191640625*^9, 3.590654200078125*^9}, {3.590655528328125*^9, 
   3.59065554496875*^9}, 3.590836961220335*^9, {3.5908374490471563`*^9, 
   3.5908374738380985`*^9}, {3.716708971997825*^9, 3.7167089861762447`*^9}},
 TextJustification->1,
 FontFamily->"Times New Roman",
 FontSize->16],

Cell[GraphicsData["CompressedBitmap", "\<\
eJztWb1rHEcUH+/u3eoURZbthESd8H+g4kAp3IlLlVqlkEzAFigJjtK4UkRE
QKBgJ66EURUCbg4XagwqDO6CjQnGcK2dJs0VgfhaZeZ9zZvdmb01JFERC+9w
+2be17z3e29m/dnGzo3Ptzd2bl7fWPr01sZXN25e/3pp8OUtS8ovGJP9aIwZ
LBn3+8z+pOHM/sPhnhsc+V8gdJEwGY9g2HdD793U/2zqmiOY3Dxcd6m3Zh7a
txJoBdHc37I5eDqaoaWTB2vG9G/D21yEfYbYJ+Mjs+nIdu2L8SiPsM/Gl77h
pU9vmxUkGTC/TJq/j6smoj/kFhop2nygbFe8sxFa1pL3r9ZWL8DKnpkMj83i
4i4820OUcrJl31eHZvJ8aAaWnsNsYQaHv8I8rWHy4tYpknE5kks73jF3n4+E
gzU5KRiIrnl5eEe043NsTjhOncA1eGzcMsiGebOy/whoL/aXMUH6a2azD1ki
dF4D8XZ/60e8kzpbMrJGRLkdXheWnMJStSahIY/EJZ+itaWYXUoubajxOcsi
cqB1IEvQWJc1WitZsn6ksquLWRPIhe0sxIVH5qCPExiFPNAs6FLJlzEc4qJh
1poi4sgi5yDSZq2KZRGnRU/Cd9R0sUGTs95r1ZtCVpDKQswgWWKdMrpo4Zj1
ImeJymhLzihCgW+0vcjyXsAiZRBooeEuZ5CnpyKedvb3aim4RKXg5eGxABaA
GeAagEnxLMzdVXyHua1TDv3Jlsc8Z5oslRQphabnQJStOlgnP6zBze0B+8eY
ERpFIcCR7J/3vaRM17IUJlNIT4iLQXSGsdSe5Tt2OHBGBRjYOZiV4AMAwspX
bzolmsNZXVlT8Jo0uIzUAOUWBvhyxb7KbjXIrLwX0v0agOpFS0uMtdia5QtT
LGnwAHcO1X0cYasGit4bg5j0MAHOIuyUq8MudcjJ+NRsEzZdg/XNNQcWbukx
MGYcd8Sw4J55nLwCFOZBM88S3dkX7XnZvVpzC7bOtyDKfcZnmK5YF+10Ep9x
aY34bM/yLe2TP4t6NjYU+eZUYQlTQ/bBrlf70aHO4uv2SM5GgTrf5AuOfDWf
rWQtjjXmnP/RytESpWzpLFmaRiipDU7a9JdHnM2mraP9zWh/G+FXsdpuYL2X
NiA2CGVPhfKte2kn2kvRh/flWF09dus+i4octhF3vJ91/M4FTRd43NE9Jg8b
bMHtJgoiVb0gxf19o17B6JTs1tHeCX5pnlPd7aVkRQy/UXHN+G3Nsks0XYtw
3Udv0WsTv2v8PlnS3Wi+ztcgp9b0lqaDuUl0kypfa+trq2aUjaI4zRrVxUxr
gW6U/U8246jLrdDNiPMd1qNRarW6ZDPiC6oGwRF4TJfvRbqAR96drCzSlWOZ
nwW1P2gjirZmDlR3MnyM9lfRHrnBHWnFhi88BCaOzHVRU4/M7Vh2hdFfSau3
L7kIl9GLMNyhpbN0uESpHPAXP6GrfY7dhuttnE/Vy3RJ1Pno75tavtyGr9Ah
Y1rbVqKnquooVQjDlf4UM5K3Yb06OJSoaLg1cjFXLb6eiKkioO/EeXBnQzu6
qTtx/SNI1eHQhdetwO6ALGDvWvBW2zcAkj/haWxfjqTx1Qgt9vnvUoR2KFnm
Xf8mQntT9WuB4VYpSlRM5GMQnD781ADrGn9ZlbKEB4wrbKH6wHU1Qkt8mF2I
k39I+lgm6j3C/8+qz/AN9IOINJj4Irr8/D+Mv5s6rymbJa8e/2Ke/bQDz5kb
YdiD99z88ewJrHNPN2R0C37+5CI8Z26EYQ/ec/Pb/e9TjE6mm4YlboRhD96j
Gv+b/6Q7J4K58DctcxPc\
\>"], "Graphics",
 ImageSize->{658, 70},
 Background->GrayLevel[1]],

Cell[CellGroupData[{

Cell["Examples", "Subsubsection",
 CellChangeTimes->{{3.58747850765625*^9, 3.587478548078125*^9}, {
   3.58747922809375*^9, 3.587479249828125*^9}, {3.587634047152693*^9, 
   3.5876340554030094`*^9}, {3.587643803194679*^9, 3.5876438089604883`*^9}, 
   3.588430225054895*^9, 3.590761196984375*^9},
 TextJustification->1,
 FontFamily->"Times New Roman",
 FontSize->16],

Cell["\<\
If you want to use the same name a[n] you need to clear the name of the \
function to avoid mistakes: \
\>", "Text",
 CellChangeTimes->{{3.5907578049375*^9, 3.590757925703125*^9}, {
   3.590759155546875*^9, 3.5907591740625*^9}, 3.590761196984375*^9, 
   3.5907612696875*^9, {3.590837580865075*^9, 3.59083758705891*^9}, {
   3.590838220216652*^9, 3.590838324700567*^9}},
 FontSize->16],

Cell[BoxData[
 RowBox[{"Clear", "[", "a", "]"}]], "Input",
 CellChangeTimes->{{3.5908381280580006`*^9, 3.5908381482152677`*^9}, {
  3.5908381809006195`*^9, 3.5908381816026917`*^9}}],

Cell["This solves a recurrence equation for a geometric series:", "Text",
 CellChangeTimes->{{3.5907578049375*^9, 3.590757925703125*^9}, {
   3.590759155546875*^9, 3.5907591740625*^9}, 3.590761196984375*^9, 
   3.5907612696875*^9, {3.590837580865075*^9, 3.59083758705891*^9}, {
   3.6573380681776695`*^9, 3.6573380706919947`*^9}},
 FontSize->16],

Cell[BoxData[
 RowBox[{"RSolve", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{
      RowBox[{"a", "[", "n", "]"}], "==", 
      RowBox[{
       RowBox[{"2", 
        RowBox[{"a", "[", 
         RowBox[{"n", "-", "1"}], "]"}]}], "+", "1"}]}], ",", 
     RowBox[{
      RowBox[{"a", "[", "1", "]"}], "==", "1"}]}], "}"}], ",", 
   RowBox[{"a", "[", "n", "]"}], ",", "n"}], "]"}]], "Input",
 CellChangeTimes->{{3.5908375978084126`*^9, 3.590837601646406*^9}, {
  3.657342180549716*^9, 3.657342197865716*^9}}],

Cell["\<\
This gives the same result:
\
\>", "Text",
 CellChangeTimes->{{3.5907578049375*^9, 3.590757925703125*^9}, {
   3.590759155546875*^9, 3.5907591740625*^9}, {3.59075921534375*^9, 
   3.59075926509375*^9}, 3.5907593211875*^9, {3.5907596524375*^9, 
   3.59075969259375*^9}, {3.590760191984375*^9, 3.5907601958125*^9}, 
   3.590761196984375*^9, {3.5908376164055195`*^9, 3.5908376197286606`*^9}, {
   3.657338073578827*^9, 3.6573380783870134`*^9}, {3.6573383585700045`*^9, 
   3.657338360101836*^9}},
 FontSize->16],

Cell[BoxData[
 RowBox[{"RSolve", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{
      RowBox[{"a", "[", 
       RowBox[{"n", "+", "1"}], "]"}], "==", 
      RowBox[{
       RowBox[{"r", " ", 
        RowBox[{"a", "[", "n", "]"}]}], "+", "1"}]}], ",", 
     RowBox[{
      RowBox[{"a", "[", "1", "]"}], "==", "1"}]}], "}"}], ",", 
   RowBox[{"a", "[", "n", "]"}], ",", "n"}], "]"}]], "Input",
 CellChangeTimes->{{3.59073026421875*^9, 3.590730325203125*^9}, {
   3.590730385890625*^9, 3.5907303879375*^9}, {3.590758518640625*^9, 
   3.59075852596875*^9}, {3.590759270046875*^9, 3.590759281453125*^9}, {
   3.590759387359375*^9, 3.5907593919375*^9}, {3.590760013234375*^9, 
   3.590760019890625*^9}, {3.59076007096875*^9, 3.59076007521875*^9}, {
   3.590760135125*^9, 3.590760136171875*^9}, 3.590761197*^9, {
   3.590837629214433*^9, 3.5908376367344046`*^9}}],

Cell[TextData[{
 "\n",
 Cell[BoxData[
  ButtonBox["RSolve",
   BaseStyle->"Link",
   ButtonData->"paclet:ref/RSolve"]], "InlineFormula"],
 " does not require you to specify explicit values for terms such as ",
 Cell[BoxData[
  RowBox[{"a", "[", "1", "]"}]], "InlineFormula"],
 ". It automatically introduces undetermined constants ",
 Cell[BoxData[
  RowBox[{
   ButtonBox["C",
    BaseStyle->"Link",
    ButtonData->"paclet:ref/C"], "[", 
   StyleBox["i", "TI"], "]"}]], "InlineFormula"],
 " to give a general solution. This gives an algebraic solution to a \
recurrence equation. "
}], "Text",
 CellChangeTimes->{{3.5907578049375*^9, 3.590757925703125*^9}, {
   3.590759155546875*^9, 3.5907591740625*^9}, {3.59075921534375*^9, 
   3.59075926509375*^9}, 3.5907593211875*^9, {3.5907596524375*^9, 
   3.59075969259375*^9}, {3.590760191984375*^9, 3.5907601958125*^9}, {
   3.590760226125*^9, 3.590760393203125*^9}, {3.590760463828125*^9, 
   3.59076048721875*^9}, {3.590760553625*^9, 3.590760614515625*^9}, 
   3.590761197*^9, {3.590837670215438*^9, 3.5908376802628684`*^9}, {
   3.5908377955898952`*^9, 3.590837809568929*^9}},
 FontSize->16],

Cell[BoxData[
 RowBox[{"RSolve", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"a", "[", "n", "]"}], "==", 
     RowBox[{
      RowBox[{"4", " ", 
       RowBox[{"a", "[", 
        RowBox[{"n", "-", "1"}], "]"}]}], "+", 
      RowBox[{"a", "[", 
       RowBox[{"n", "-", "2"}], "]"}]}]}], "}"}], ",", 
   RowBox[{"a", "[", "n", "]"}], ",", "n"}], "]"}]], "Input",
 CellChangeTimes->{{3.590760490875*^9, 3.590760530484375*^9}, 
   3.590761197*^9, {3.5908376909655657`*^9, 3.590837695568038*^9}}],

Cell[TextData[{
 Cell[BoxData[
  ButtonBox["RSolve",
   BaseStyle->"Link",
   ButtonData->"paclet:ref/RSolve"]], "InlineFormula"],
 " can solve equations that do not depend only linearly on ",
 Cell[BoxData[
  FormBox[
   RowBox[{"a", "[", "n", "]"}], TraditionalForm]], "InlineMath"],
 ". For nonlinear equations, however, there are sometimes several distinct \
solutions that must be given. Just as for differential equations, it is a \
difficult matter to find symbolic solutions to recurrence equations, and \
standard mathematical functions only cover a limited set of cases. \nHere is \
the general solution to a nonlinear recurrence equation with a complex \
solution:\n"
}], "Text",
 CellChangeTimes->{{3.5907578049375*^9, 3.590757925703125*^9}, {
   3.5907580161875*^9, 3.59075805671875*^9}, {3.590760732171875*^9, 
   3.59076074753125*^9}, {3.5907607908125*^9, 3.59076079853125*^9}, {
   3.590760868203125*^9, 3.590760874640625*^9}, 3.590761197*^9, {
   3.5907613241875*^9, 3.590761350671875*^9}, {3.5908378457178364`*^9, 
   3.5908378931779037`*^9}, {3.6573384216026793`*^9, 3.657338430097757*^9}},
 FontSize->16],

Cell[BoxData[
 RowBox[{"RSolve", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"a", "[", "n", "]"}], "==", 
     RowBox[{
      RowBox[{"a", "[", 
       RowBox[{"n", "+", "1"}], "]"}], " ", 
      RowBox[{"a", "[", 
       RowBox[{"n", "-", "1"}], "]"}]}]}], "}"}], ",", 
   RowBox[{"a", "[", "n", "]"}], ",", "n"}], "]"}]], "Input",
 CellChangeTimes->{{3.590760838671875*^9, 3.5907608431875*^9}, 
   3.590761197*^9, {3.590837877997547*^9, 3.590837880805835*^9}}],

Cell["This solve a second-order inhomogeneous equation:", "Text",
 CellChangeTimes->{{3.5907578049375*^9, 3.590757925703125*^9}, {
  3.5907580161875*^9, 3.59075805671875*^9}, {3.590760732171875*^9, 
  3.59076074753125*^9}, {3.5907607908125*^9, 3.59076079853125*^9}, {
  3.590760868203125*^9, 3.590760874640625*^9}, {3.590760987828125*^9, 
  3.590761023796875*^9}, {3.5907611805*^9, 3.590761197015625*^9}, {
  3.590837935239817*^9, 3.5908379545077934`*^9}, {3.590838786801166*^9, 
  3.590838802402766*^9}},
 FontSize->16],

Cell[BoxData[
 RowBox[{"RSolve", "[", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"a", "[", 
      RowBox[{"n", "+", "2"}], "]"}], "-", 
     RowBox[{"4", 
      RowBox[{"a", "[", 
       RowBox[{"n", "+", "1"}], "]"}]}], "+", 
     RowBox[{"3", 
      RowBox[{"a", "[", "n", "]"}]}]}], "\[Equal]", 
    RowBox[{"n", " ", 
     RowBox[{"4", "^", "n"}]}]}], ",", 
   RowBox[{"a", "[", "n", "]"}], ",", "n"}], "]"}]], "Input",
 CellID->334039031],

Cell[BoxData[
 RowBox[{"RSolve", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{"a", "[", 
        RowBox[{"n", "+", "1"}], "]"}], "-", 
       RowBox[{"2", 
        RowBox[{"a", "[", "n", "]"}]}]}], "\[Equal]", "1"}], ",", 
     RowBox[{
      RowBox[{"a", "[", "0", "]"}], "\[Equal]", "1"}]}], "}"}], ",", 
   RowBox[{"a", "[", "n", "]"}], ",", "n"}], "]"}]], "Input",
 CellTags->"Ex--22029503983018204282,2",
 CellID->180814161],

Cell[BoxData[
 RowBox[{"RSolve", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{"a", "[", 
        RowBox[{"n", "+", "2"}], "]"}], "-", 
       RowBox[{"4", 
        RowBox[{"a", "[", 
         RowBox[{"n", "+", "1"}], "]"}]}], "+", 
       RowBox[{"3", 
        RowBox[{"a", "[", "n", "]"}]}]}], "\[Equal]", 
      RowBox[{"n", " ", 
       RowBox[{"4", "^", "n"}]}]}], ",", 
     RowBox[{
      RowBox[{"a", "[", "1", "]"}], "\[Equal]", "1"}], ",", " ", 
     RowBox[{
      RowBox[{"a", "[", "2", "]"}], "\[Equal]", "4"}]}], "}"}], ",", 
   RowBox[{"a", "[", "n", "]"}], ",", "n"}], "]"}]], "Input",
 CellChangeTimes->{{3.657338507458998*^9, 3.6573385302582273`*^9}, 
   3.6573386748697443`*^9},
 CellID->236072127],

Cell["\<\
This solve a second-order variable coefficient equation in terms of \
elementary functions:\
\>", "Text",
 CellChangeTimes->{{3.5907578049375*^9, 3.590757925703125*^9}, {
  3.5907580161875*^9, 3.59075805671875*^9}, {3.590760732171875*^9, 
  3.59076074753125*^9}, {3.5907607908125*^9, 3.59076079853125*^9}, {
  3.590760868203125*^9, 3.590760874640625*^9}, {3.590760987828125*^9, 
  3.590761023796875*^9}, {3.5907611805*^9, 3.590761197015625*^9}, {
  3.590837935239817*^9, 3.5908379545077934`*^9}, {3.590838786801166*^9, 
  3.590838802402766*^9}, {3.5908388359306045`*^9, 3.5908388497380204`*^9}},
 FontSize->16],

Cell[BoxData[
 RowBox[{"RSolve", "[", " ", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"(", 
       RowBox[{"n", "+", "4"}], ")"}], " ", 
      RowBox[{"a", "[", 
       RowBox[{"n", "+", "2"}], "]"}]}], "-", 
     RowBox[{"a", "[", 
      RowBox[{"n", "+", "1"}], "]"}], "-", 
     RowBox[{
      RowBox[{"(", 
       RowBox[{"n", "+", "1"}], ")"}], 
      RowBox[{"a", "[", "n", "]"}]}]}], "\[Equal]", "0"}], ",", 
   RowBox[{"a", "[", "n", "]"}], ",", "n"}], " ", "]"}]], "Input",
 CellID->6943376]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["RecurrenceTable[]", "Subsubsection",
 CellChangeTimes->{{3.58747850765625*^9, 3.587478548078125*^9}, {
   3.58747922809375*^9, 3.587479249828125*^9}, {3.587634047152693*^9, 
   3.5876340554030094`*^9}, {3.587643803194679*^9, 3.5876438089604883`*^9}, 
   3.588430225054895*^9, 3.59083410768832*^9, 3.590839177148*^9, {
   3.657338842534399*^9, 3.6573388543906975`*^9}, {3.678774787278721*^9, 
   3.678774789868325*^9}, {3.6888248137927046`*^9, 3.6888248158978252`*^9}, {
   3.688825099434043*^9, 3.688825099682057*^9}},
 TextJustification->1,
 FontFamily->"Times New Roman",
 FontSize->16],

Cell["\<\
This function creates tables of values from recurrences and functional \
equations\
\>", "Text",
 CellChangeTimes->{{3.5898125465*^9, 3.58981255534375*^9}, {
   3.590833333475011*^9, 3.590833436728385*^9}, {3.657337919964547*^9, 
   3.657337921149174*^9}, {3.6787747945815334`*^9, 3.6787748450536222`*^9}, {
   3.6888251072744913`*^9, 3.688825164216748*^9}, 3.6888256420818586`*^9, {
   3.7167093702542763`*^9, 3.716709390913766*^9}},
 FontSize->16],

Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", 
  GraphicsBox[
   TagBox[RasterBox[CompressedData["
1:eJztnbuOI0l2QAlJhvyZHxBmjP4NyaUnFjDeoncByRWwIiCsRQJtdP9AGfMB
VQW0JRRQPzAAa2qMQq+9ux57x9QnDJWRkREZjxuvZPFVdS5ON1jJyBs3IiPj
3ngw81/+8F///p//MJvN/vufu//+/ff/869//OPv/7T4p+6Pf/vT8j/+8I/d
h//r/v1vl0Z93iEIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAI
giAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgpTll4/ff/9dVr7//nef/35qM9+2
/P3z7/LXaPrF6lSbBvDxl6ozuhZj8qo8A0EQBDl/KccDQ+dP3386IR5AEARB
Diy18UAnTBOcSogHEARBkANLQzxA/38qIR5AEARBDixjPCD37r98nO5rkENJ
6arVC/EAgiAIoqTsWWz/L7oM99vvsmsKwSBXii6Sxsg+yMQq/UHl2Lw0+W8b
7B+t0me6p2R8YkV5m+uwWFGhBf7kj2BtGA+MFZVSno8H2suCIAiCnIPsEQ9E
7ibtJpKrEpFznhgPfIx9dP7bBvudeOCzfEpU4MryNtWhrL/mqgXi+Wg3HpBK
F4cxyXhgYlkQBEGQc5Cm9QI3RW7jwfeRy0ml9N3TxHhAVpj/tsH+ip9k7l3e
ks6JV83x5s4p7jkJJ+5ZkphRmdoeEARBkDOUlv2Enisez3Jdjj1o07rT5t+7
RwX3tFc8EDrG7Lf19gdVNLo2rwijw6svb4sNyauWn9J3/bA1zBvy+/GAo80r
tatHvBZ7lAVBEAQ5B6l+/kBiMOj7I2eZfjjuHPEHidpZRG5/YjwgbkZIf1tv
/y45spY9bH15m2yIyta+n7AYD4S15H4lhYIVgVxNWRAEQZBzkKp4IOMp4m98
Z9HkuabHA8KEdObbBvt9q/zUkoetLm+bDbUVlRB/iiMRD0R1KMc2wrXYqywI
giDIOUghHpAXfhNL867E8cA+2+aL8YC40z35bYP9Oavyy/SF8rbZUFtRYppI
rRwPZH48Ii4NjAf3KguCIAhyDiJ6Fv9HZ3FPXt//54aflcYMXwjGnGE8UF/e
g8YDvnJtXnG9gHgAQRDkDUt55VfozBseYvMi6wWJpwdMjgfaHsIzcX6gfr2g
3VPmc5EXOIrxwIusF+D1EQRBLlMyniXzaJp6L598EJB2ptGeO3GlPrGjb3I8
8EK7GqR4oL68+zxjMHtuwjufYj8hgiAIcilS61kC5yL+vkynT23C97NwXbzg
TJ3s0jMV0+OBBvsb44GG8rbYEJtfddUCx5+PB/yQwNt+IF764u8N68qCIAiC
nINMfX9B6Tk2oicSJXg6Tibldy8XD7TY3xYPNJS3wYamqyZMpwSPK/S3ihR+
YCL+cPK74FpMLwuCIAhyDtL25FvPNaR3kWV+7x+mTA/GPf/18aOQfp94oMH+
1nigpbwNdSjrF69aMawKhvC6CB8/CmfFo/vk84onlgVBEAQ5B2n+5Vrs+Xz3
kez6YyeVyNBfIND6fjlAPFBr/4R4oKm8DXVYNimyzb1qoyuPnrI4ZJp8XKFg
bc37jHgnJoIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIg
CIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIg
CIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgyFnIb78CAADAW+fHGQAAAAAA
AAAAAAAAvHVOvmABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACXxdPDt+9+
tHzz/qfTm3RIvn6+c8urivzu7u5rMv3Pn5IJrKofPv+lyYbH1ayT9eb0tfGy
bG/ms9n8dntyS+7XXf2u7r2D2+ur7uDienvqWgIAOFs6v2Y9Wuf+Wr3bZWEL
25X0w5M6cvc+Fw8UE7i1V8njzev0SmdVru3mPjZGPAgAABrPo3396YdPX8bP
iXmDzpna49pd6sGy9rD6W6vz7v3wp07zzbuHn7PHxXwH/Z8ezKDeJE7Yk7d/
58QDI85UievilcKnQVU8VyDEA9l8d4LffL5dqBkDO6QdJhBuuiFtN9zuR7tq
YGs/6JG4kqub57qrPGbRK1ejeKVEadNfzderuZm16DOaLR83y6YBtV8uweyS
hgmnJCEeAABoxfVonY+2XtIdF3dprGtTU+gmZlDHjYvsPo8e9unB85K9qx00
PD24yeLjqXz7vIYwIJjTEO1J6bFnRfHAFxtj+PXghAHK13uhSBwP5PPdhX5T
uePBC/ceUPnrPjBQH7oj2+ftZnl1c3+7WD6qSe/lozqlaVo+zKKLBK5Wy7WN
Jfq5dBVadAFAl3WXY3ekS7Dokt1X5+KXSzC7pGHCKWmIBwAAWnGX1L2JgnCd
XfvBLx8Sewzy8YA8qR4fT+ab0p+wJ61HI8QD/iluPOCm9MyI44FSvrvAb2oX
bF22MyTv4gE9/FcfFksVAAyJlQdf184MRFn0p185o28VHmhtRr86srhudMfP
jxvPJMHsEhNOSZf6Og6ZiAcAADKMHu3pwXFeKb9/4HigWX+znZooHvjy4Z03
rhfnSUIzhPmBQr47Px7QSwN2G1735+iyh4P369l8vXn2vu1dduWOxCALo9yO
vsfZBqP/WY3QG1uRjV4MstlZolO6qGDmzoq4ldNld72eLdd6OkWndLVJMwzE
AwAAGVyPpua3zdx7am+hf7xzo4NjHfX0Y+Sp8UAy31S8kbInvzcyjAc6m60f
7+331gu8rwrrBcU9mUE8oH2c9u/Dn+5meGdOYHCLq/64P8bvnb7sxIMsdr2G
W+ujzYyE2k5gM4rG5hn9Yrkisyv0SKc89jMVt6vu//ntRs+KdGGD+tYarNJE
BrNeAADQhtlEZ12e6/70lr943ts9PnrVr86mu88PZvVBOehvhXn41HE5X7uo
oZIZm4MtizV6dv76iFsoe7yz/8OnYXuk/r2h/tPfTxjan6qfwnqBdv1mZ+Cw
UVB5wHGxYHTcakPgcj0bxBl0S7+wE7NQSsxmwl6DmT2YuesU0XA+q18qV2T2
fVGPdMr9rVq2GGYGdDyzvVkOEx1qs4GutGXl0gDxAAAAnA8Vv8tr3DE4Li60
Moy1X0R/uVytdmqPP8xXDKsYj6veYGc9paureD2CeAAAAM6c8vOI/LWAMpN3
31WeWJes/DyiRjsH179Zjr+CHH4vOZstlmv9C0oVz6ivnN0L0s8VeR4RAABc
FO3PFpiKnpY/QkYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAXg30yT90j
emoYHgw47UlBL2rJYe08jywOyEEvxOUqn5DjC9pz/KK9HahbOG9aH9HTTMUt
0GZD61uJJ5n0Auxv5zlkcbm8qXhgP7wbEJ91uLoFOG8uLx7Yv786To93hFzo
uk9VOcQDMKFuAaox78cxT4sND5rn3d0Pr6MNHoInpOzHjzdLo1C9v8aKeQOv
+Xt8BV6oeXw1jzAvHesMENYLfIWRDS7mWX9WefyeIM34GkGTRW+/aJ64hOF8
bq6EBju9ShueEmxehKRS6q/m69XcqOqfEtzZ1r8w0dUTZhHZEDWAX+XTxxdA
19VGzRGpxlI5Jq6drNZvWrrsw4e44UW3idxchYsrZu3UsPw2SeESJO7W3IVI
6knXldek851DZHlwA9Z3L4ESv6WJ6cODYpOLe62i5mqbC6Wov+4py8d0Ugfr
nFXdVAo9j9OZuOnXN/pFJOE9sj3mk1phOuol9eZyiw7LTg6rK+u8sD6Tsm8q
4pPt7YnJoYFR4j4bf3jifQL/Dby7UKf5ECtMhdDea3ps/aTGLwl3JpiXjwfa
K6HNzuGtgiqBuT2vVsu134kN70zsMt0+b9WLh5brRfz24cBrxzakG4BQolRt
OGqHPi0+UlFjuRyrL4RX7c9b9WKme/U+pv7iRpXj9rTx6aY9FKrCve/iO7Sm
GcR3a/ZCFJpTvq5SnUPJcq8TqOxewlbttLSKCgxbju9VR1WVmkulTjXU1A1l
E4SXIzuUiFuX2MHWN5VC9xt2JioY0C8rX/XeP7pHHllkvAi8V9I4rtOXZGcl
p4wufRzous1VVDIEzOkpxMKgKbqDYoWpeMB/TY95b29yPtOOK5WHrYrtpZt6
QiU02TkktjdyWPzReKNWHVGvJ46z9ocbgg3pe18oUaI2gnBCPFJTY9kchWsn
N+noii+WYfghFMeZcxBvgcAwMWvxDm1rBmJUI+We1SO18+potioeqOxeXPyi
lSsw3eTCWqrQXC515txSArn2EvFAvoNN3Fa5plLV85jOpJ9CtG9Xty92D++R
7fWamYEzJxUPCIO7usbvfmuziNtwEA8kX5OnZ63FOygbJ8t3kK/wheIBE1Q7
4wLZvFI8MKESqu00s3/OdfGGjeMlc3x6KhjbIx4QSrRHPNBQY4kcxWtXeGmj
SrzePDvlTVSOTZBrro5hYtYHigdKuQt64ro6QjxQuBZRV1OowDiv6nhgcpdY
LEXDdU8NJbId7IR4IG4ejm1BZzLeBc5by8V7pIskczO9cHJcp+BNecUXsTRj
NqZM30q26XrOSFDithxv3J3R6RHeQYJCeaHBn1XzWnhyskK1+ZVvkmCeNBnu
fdtYCS122rtyvEar61t7q5oIf1wmVosFGW/rtpnYhqQDkkok1UYwsanWL6Ij
dTWWyNF32aug7832YM54J7tQ5VxoqT0kDIuydnMRm3q5GQiXI3E7FJqTVFfp
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
     "], {{0, 238}, {688, 0}}, {0, 255},
     ColorFunction->RGBColor],
    BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
    Selectable->False],
   BaseStyle->"ImageGraphics",
   ImageSize->{755., Automatic},
   ImageSizeRaw->{688, 238},
   PlotRange->{{0, 688}, {0, 238}}]}]], "Input",
 CellChangeTimes->{{3.688825033353263*^9, 3.6888250357814016`*^9}}],

Cell["\<\
           Solve an initial-value problem for a first-order difference \
equation:\
\>", "ExampleText",
 CellChangeTimes->{{3.71670970492212*^9, 3.7167097078168416`*^9}},
 FontSize->16,
 CellID->461572052],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"RecurrenceTable", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{
      RowBox[{"a", "[", 
       RowBox[{"n", "+", "1"}], "]"}], "==", 
      RowBox[{"3", 
       RowBox[{"a", "[", "n", "]"}]}]}], ",", 
     RowBox[{
      RowBox[{"a", "[", "1", "]"}], "==", "7"}]}], "}"}], ",", "a", ",", 
   RowBox[{"{", 
    RowBox[{"n", ",", "1", ",", "10"}], "}"}]}], "]"}]], "Input",
 CellID->303640169],

Cell[BoxData[
 RowBox[{"ListPlot", "[", 
  RowBox[{"{", 
   RowBox[{
   "7", ",", "21", ",", "63", ",", "189", ",", "567", ",", "1701", ",", 
    "5103", ",", "15309", ",", "45927", ",", "137781"}], "}"}], 
  "]"}]], "Input",
 NumberMarks->False]
}, Closed]],

Cell[CellGroupData[{

Cell[BoxData[
 InterpretationBox[Cell["\t", "ExampleDelimiter"],
  $Line = 0; Null]], "ExampleDelimiter",
 CellID->431754779],

Cell["           Find the first few Fibonacci numbers:", "ExampleText",
 CellChangeTimes->{{3.716709709332896*^9, 3.7167097120852313`*^9}},
 FontSize->16,
 CellID->656256634],

Cell[BoxData[
 RowBox[{"RecurrenceTable", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{
      RowBox[{"a", "[", "n", "]"}], "==", 
      RowBox[{
       RowBox[{"a", "[", 
        RowBox[{"n", "-", "1"}], "]"}], "+", 
       RowBox[{"a", "[", 
        RowBox[{"n", "-", "2"}], "]"}]}]}], ",", 
     RowBox[{
      RowBox[{"a", "[", "1", "]"}], "==", "1"}], ",", 
     RowBox[{
      RowBox[{"a", "[", "2", "]"}], "==", "1"}]}], "}"}], ",", "a", ",", " ", 
   "\n", "  ", 
   RowBox[{"{", 
    RowBox[{"n", ",", "10"}], "}"}]}], "]"}]], "Input",
 CellID->613619011],

Cell[BoxData[
 RowBox[{"Table", "[", 
  RowBox[{
   RowBox[{"Fibonacci", "[", "n", "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"n", ",", "10"}], "}"}]}], "]"}]], "Input",
 CellID->514398156]
}, Closed]]
}, Closed]]
}, Closed]]
}, Closed]]
},
CellGrouping->Manual,
WindowSize->{1251, 911},
WindowMargins->{{Automatic, 295}, {1, Automatic}},
FrontEndVersion->"10.2 for Microsoft Windows (64-bit) (July 29, 2015)",
StyleDefinitions->"Report.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{
 "Ex--22029503983018204282,2"->{
  Cell[80151, 1633, 475, 15, 33, "Input",
   CellTags->"Ex--22029503983018204282,2",
   CellID->180814161]}
 }
*)
(*CellTagsIndex
CellTagsIndex->{
 {"Ex--22029503983018204282,2", 98184, 2031}
 }
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 722, 16, 67, "Title"],
Cell[CellGroupData[{
Cell[1327, 42, 238, 6, 68, "Section 1"],
Cell[1568, 50, 2008, 34, 115, "Text"]
}, Closed]],
Cell[CellGroupData[{
Cell[3613, 89, 746, 15, 68, "Section 1"],
Cell[4362, 106, 1915, 28, 31, "Text"],
Cell[6280, 136, 3117, 49, 115, "Text"],
Cell[CellGroupData[{
Cell[9422, 189, 432, 8, 33, "Subsubsection"],
Cell[9857, 199, 566, 19, 39, "Text"],
Cell[10426, 220, 314, 9, 49, "Input",
 CellID->698557789],
Cell[10743, 231, 643, 15, 52, "Text"],
Cell[11389, 248, 5546, 93, 329, "Graphics"],
Cell[16938, 343, 532, 17, 70, "Text"],
Cell[17473, 362, 361, 11, 70, "Input",
 CellID->88999241]
}, Closed]],
Cell[CellGroupData[{
Cell[17871, 378, 433, 8, 70, "Subsubsection"],
Cell[18307, 388, 317, 11, 70, "Text"],
Cell[18627, 401, 22635, 373, 70, "Graphics"],
Cell[41265, 776, 156, 3, 70, "Input"],
Cell[41424, 781, 373, 7, 70, "Text"]
}, Closed]],
Cell[CellGroupData[{
Cell[41834, 793, 491, 9, 70, "Subsubsection"],
Cell[42328, 804, 289, 8, 31, "Text"],
Cell[42620, 814, 14742, 246, 418, "Input"],
Cell[CellGroupData[{
Cell[57387, 1064, 244, 4, 31, "Text"],
Cell[57634, 1070, 203, 6, 33, "Input",
 CellID->653825295]
}, Closed]],
Cell[CellGroupData[{
Cell[57874, 1081, 553, 11, 31, "Text"],
Cell[58430, 1094, 554, 17, 33, "Input",
 CellID->20106212]
}, Closed]],
Cell[58999, 1114, 798, 19, 23, InheritFromParent]
}, Closed]]
}, Closed]],
Cell[CellGroupData[{
Cell[59846, 1139, 778, 13, 68, "Section 1"],
Cell[60627, 1154, 759, 18, 52, "Text"],
Cell[61389, 1174, 431, 13, 53, "Input",
 CellID->30910],
Cell[61823, 1189, 429, 14, 57, "Input",
 CellID->4460],
Cell[62255, 1205, 459, 15, 41, "Input",
 CellID->320308157],
Cell[62717, 1222, 804, 18, 52, "Text",
 CellID->6972],
Cell[63524, 1242, 562, 18, 60, "Input",
 CellID->127861037]
}, Closed]],
Cell[CellGroupData[{
Cell[64123, 1265, 765, 13, 68, "Section 1"],
Cell[64891, 1280, 2699, 53, 73, "Text"],
Cell[CellGroupData[{
Cell[67615, 1337, 589, 10, 33, "Subsubsection"],
Cell[68207, 1349, 2503, 50, 53, "Text"],
Cell[70713, 1401, 1962, 34, 86, "Graphics"],
Cell[CellGroupData[{
Cell[72700, 1439, 365, 7, 33, "Subsubsection"],
Cell[73068, 1448, 394, 8, 31, "Text"],
Cell[73465, 1458, 181, 3, 33, "Input"],
Cell[73649, 1463, 345, 5, 31, "Text"],
Cell[73997, 1470, 519, 15, 33, "Input"],
Cell[74519, 1487, 518, 11, 52, "Text"],
Cell[75040, 1500, 870, 20, 33, "Input"],
Cell[75913, 1522, 1140, 27, 74, "Text"],
Cell[77056, 1551, 508, 14, 33, "Input"],
Cell[77567, 1567, 1124, 22, 95, "Text"],
Cell[78694, 1591, 478, 13, 33, "Input"],
Cell[79175, 1606, 520, 8, 31, "Text"],
Cell[79698, 1616, 450, 15, 33, "Input",
 CellID->334039031],
Cell[80151, 1633, 475, 15, 33, "Input",
 CellTags->"Ex--22029503983018204282,2",
 CellID->180814161],
Cell[80629, 1650, 762, 23, 33, "Input",
 CellID->236072127],
Cell[81394, 1675, 620, 11, 31, "Text"],
Cell[82017, 1688, 522, 17, 33, "Input",
 CellID->6943376]
}, Closed]]
}, Closed]],
Cell[CellGroupData[{
Cell[82588, 1711, 594, 10, 33, "Subsubsection"],
Cell[83185, 1723, 459, 9, 31, "Text"],
Cell[83647, 1734, 12118, 203, 313, "Input"],
Cell[95768, 1939, 215, 6, 27, "ExampleText",
 CellID->461572052],
Cell[CellGroupData[{
Cell[96008, 1949, 431, 14, 33, "Input",
 CellID->303640169],
Cell[96442, 1965, 246, 7, 33, "Input"]
}, Closed]],
Cell[CellGroupData[{
Cell[96725, 1977, 125, 3, 23, "ExampleDelimiter",
 CellID->431754779],
Cell[96853, 1982, 174, 3, 27, "ExampleText",
 CellID->656256634],
Cell[97030, 1987, 579, 19, 54, "Input",
 CellID->613619011],
Cell[97612, 2008, 188, 6, 33, "Input",
 CellID->514398156]
}, Closed]]
}, Closed]]
}, Closed]]
}, Closed]]
}
]
*)

(* End of internal cache information *)
